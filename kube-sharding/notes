## Prepare Altibase sharding package
altibase_home.tgz을 만들어서 C:\Users\ALTIBASE\my-docker 에 복사해 놓음.
linux-altibase> tar -cvzf altibase_home.tgz altibase_home
 
## Test environment setup
-- My Windows OS notebook
-- Install Docker Engine v20.10.17

## base image로 centos:7 사용함.
Windows-cmd> docker pull centos:7
Windows-cmd> docker run -it -v C:\Users\ALTIBASE\my-docker:/data  centos:7   "/bin/bash"

root> useradd -d /home/altibase -s /bin/bash -m altibase
root> su - altibase
altibase> vi .bash_profile  ## 아래를 추가한다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ALTIBASE_ENV
export ALTIBASE_HOME=/home/altibase/altibase_home
export ALTIBASE_PORT_NO=20300
export ALTIBASE_NLS_USE=UTF8
export PATH=$ALTIBASE_HOME/bin:$PATH
export LD_LIBRARY_PATH=${ALTIBASE_HOME}/lib:${LD_LIBRARY_PATH}
export CLASSPATH=${ALTIBASE_HOME}/lib/Altibase.jar:${CLASSPATH}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
altibase> tar -xvzf /data/altibase_home.tgz
altibase> cp altibase_home/conf/altibase.properties.shard altibase_home/conf/altibase.properties## volume direcroty들을 정리한다.altibase> rm -rf altibase_home/dbsaltibase> rm -rf altibase_home/logs
altibase> rm -rf altibase_home/xlogs
altibase> rm -rf altibase_home/arch_logs
altibase> rm -rf altibase_home/trcaltibase> rm -rf altibase_home/ZookeeperServer.tar.gzaltibase> rm -rf altibase_home/ZookeeperServer/apache-zookeeper-3.5.6-bin.tar.gz
## exit로 빠져 나오면 실행중이던 컨테이너가 정지(stop)상태로 된다.
## ctrl-q+p로 빠져 나오면 컨테이너 실행은 계속 되면서 로컬 쉘로 빠져 나올 수 있다.
## 아래의 c7981429bc36 은 CONTAINER ID 를 조회해서 변경해야 한다.
Windows-cmd> docker commit c7981429bc36 sharding:temporary
## Create Dockerfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FROM sharding:temporary
MAINTAINER Hess Lee <hess.lee@altibase.com>
******* RUN mkdir /home/altibase
ENV HOME=/home/altibase
SHELL ["/bin/bash"]
USER altibase
WORKDIR /home/altibase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Windows-cmd> docker build --tag hesslee/sharding .
# Check built image
Windows-cmd> docker run -it -v C:\Users\ALTIBASE\my-docker:/data  hesslee/sharding   "/bin/bash"
Windows-cmd> docker push hesslee/sharding

## Test environment setup
-- hess@192.168.1.107
-- minikube install : version: v1.26.0
-- kubectl install : Client Version: v1.24.0  Kustomize Version: v4.5.4  Server Version: v1.24.1

minikube start --nodes 2 -p multinode-demo
kubectl apply -f https://raw.githubusercontent.com/hessalti/work/main/kube-sharding/sharding-svc.yaml
kubectl apply -f https://raw.githubusercontent.com/hessalti/work/main/kube-sharding/sharding-sts.yaml
## check sharding pods
kubectl exec -it sharding-0 -- /bin/bash

****** problem : volumn root mount
****** problem : no environment variable setting

altibase> server create utf8 utf8
## 환경에 따라 필요한 경우가 있는것들... 
root> apt-get update
root > apt-get install vim
root> apt-get install libncurses5-dev  ## for isql
## libncurses 와 libtinfo 를 찾아서 아래 작업을 해준다.
root> ln -s libncurses.so.6.2 libncurses.so.5
root> ln -s libtinfo.so.6.2 libtinfo.so.5
